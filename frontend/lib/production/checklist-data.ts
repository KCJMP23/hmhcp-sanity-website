import { DeploymentChecklist } from './types'
import * as InfraValidators from './validators/infrastructure'
import * as SecurityValidators from './validators/security'
import * as PerformanceValidators from './validators/performance'
import * as MonitoringValidators from './validators/monitoring'
import * as TestingValidators from './validators/testing'
import * as ContentValidators from './validators/content'

export const defaultChecklist: DeploymentChecklist[] = [
  // Infrastructure
  {
    id: 'infra-ssl',
    category: 'infrastructure',
    title: 'SSL/TLS Certificate',
    description: 'Verify SSL certificate is properly configured and valid',
    required: true,
    automated: true,
    status: 'pending',
    validator: InfraValidators.validateSSL,
  },
  {
    id: 'infra-dns',
    category: 'infrastructure',
    title: 'DNS Configuration',
    description: 'Ensure DNS records are properly configured',
    required: true,
    automated: true,
    status: 'pending',
    validator: InfraValidators.validateDNS,
  },
  {
    id: 'infra-cdn',
    category: 'infrastructure',
    title: 'CDN Setup',
    description: 'Configure CDN for static assets and caching',
    required: false,
    automated: true,
    status: 'pending',
    validator: InfraValidators.validateCDN,
  },
  {
    id: 'infra-backup',
    category: 'infrastructure',
    title: 'Backup Strategy',
    description: 'Implement database and file backup procedures',
    required: true,
    automated: true,
    status: 'pending',
    validator: InfraValidators.validateBackupStrategy,
  },
  {
    id: 'infra-scaling',
    category: 'infrastructure',
    title: 'Auto-scaling Configuration',
    description: 'Configure horizontal and vertical scaling rules',
    required: false,
    automated: true,
    status: 'pending',
    validator: InfraValidators.validateScaling,
  },

  // Security
  {
    id: 'security-headers',
    category: 'security',
    title: 'Security Headers',
    description: 'Validate all security headers are properly configured',
    required: true,
    automated: true,
    status: 'pending',
    validator: SecurityValidators.validateSecurityHeaders,
  },
  {
    id: 'security-secrets',
    category: 'security',
    title: 'Secrets Management',
    description: 'Ensure all secrets are properly secured and rotated',
    required: true,
    automated: true,
    status: 'pending',
    validator: SecurityValidators.validateSecretsManagement,
  },
  {
    id: 'security-rate-limits',
    category: 'security',
    title: 'Rate Limiting',
    description: 'Configure and test rate limiting for all endpoints',
    required: true,
    automated: true,
    status: 'pending',
    validator: SecurityValidators.validateRateLimiting,
  },
  {
    id: 'security-firewall',
    category: 'security',
    title: 'Firewall Rules',
    description: 'Configure and test firewall rules',
    required: true,
    automated: true,
    status: 'pending',
    validator: SecurityValidators.validateFirewallRules,
  },
  {
    id: 'security-audit',
    category: 'security',
    title: 'Security Audit',
    description: 'Perform comprehensive security audit',
    required: true,
    automated: true,
    status: 'pending',
    validator: SecurityValidators.validateSecurityAudit,
  },

  // Performance
  {
    id: 'perf-lighthouse',
    category: 'performance',
    title: 'Lighthouse Score',
    description: 'Achieve target Lighthouse scores (>90 for all metrics)',
    required: true,
    automated: true,
    status: 'pending',
    validator: PerformanceValidators.validateLighthouse,
  },
  {
    id: 'perf-load-test',
    category: 'performance',
    title: 'Load Testing',
    description: 'Perform load testing to validate performance under stress',
    required: true,
    automated: true,
    status: 'pending',
    validator: PerformanceValidators.validateLoadTesting,
  },
  {
    id: 'perf-caching',
    category: 'performance',
    title: 'Caching Strategy',
    description: 'Implement and test caching at all levels',
    required: true,
    automated: true,
    status: 'pending',
    validator: PerformanceValidators.validateCaching,
  },
  {
    id: 'perf-compression',
    category: 'performance',
    title: 'Asset Compression',
    description: 'Enable and verify gzip/brotli compression',
    required: true,
    automated: true,
    status: 'pending',
    validator: PerformanceValidators.validateCompression,
  },

  // Monitoring
  {
    id: 'monitor-health',
    category: 'monitoring',
    title: 'Health Checks',
    description: 'Configure comprehensive health check endpoints',
    required: true,
    automated: true,
    status: 'pending',
    validator: MonitoringValidators.validateHealthChecks,
  },
  {
    id: 'monitor-alerts',
    category: 'monitoring',
    title: 'Alerting System',
    description: 'Configure monitoring and alerting for all critical metrics',
    required: true,
    automated: true,
    status: 'pending',
    validator: MonitoringValidators.validateAlertingSystem,
  },
  {
    id: 'monitor-logging',
    category: 'monitoring',
    title: 'Centralized Logging',
    description: 'Implement centralized logging and log aggregation',
    required: true,
    automated: true,
    status: 'pending',
    validator: MonitoringValidators.validateCentralizedLogging,
  },
  {
    id: 'monitor-metrics',
    category: 'monitoring',
    title: 'Metrics Collection',
    description: 'Configure application and infrastructure metrics',
    required: true,
    automated: true,
    status: 'pending',
    validator: MonitoringValidators.validateMetricsCollection,
  },

  // Testing
  {
    id: 'test-unit',
    category: 'testing',
    title: 'Unit Test Coverage',
    description: 'Achieve minimum test coverage (>90%)',
    required: true,
    automated: true,
    status: 'pending',
    validator: TestingValidators.validateTestCoverage,
  },
  {
    id: 'test-e2e',
    category: 'testing',
    title: 'E2E Test Suite',
    description: 'Run complete end-to-end test suite',
    required: true,
    automated: true,
    status: 'pending',
    validator: TestingValidators.validateE2ETests,
  },
  {
    id: 'test-integration',
    category: 'testing',
    title: 'Integration Tests',
    description: 'Validate all system integrations work correctly',
    required: true,
    automated: true,
    status: 'pending',
    validator: TestingValidators.validateIntegrationTests,
  },
  {
    id: 'test-accessibility',
    category: 'testing',
    title: 'Accessibility Testing',
    description: 'Ensure WCAG 2.1 AA compliance across all pages',
    required: true,
    automated: true,
    status: 'pending',
    validator: TestingValidators.validateAccessibilityTests,
  },

  // Content
  {
    id: 'content-completeness',
    category: 'content',
    title: 'Content Completeness',
    description: 'Verify all required pages and content are published',
    required: true,
    automated: true,
    status: 'pending',
    validator: ContentValidators.validateContentCompleteness,
  },
  {
    id: 'content-seo',
    category: 'content',
    title: 'SEO Optimization',
    description: 'Ensure all content is properly optimized for search engines',
    required: true,
    automated: true,
    status: 'pending',
    validator: ContentValidators.validateSEOOptimization,
  },
  {
    id: 'content-accuracy',
    category: 'content',
    title: 'Content Accuracy',
    description: 'Verify medical accuracy and compliance of all content',
    required: true,
    automated: true,
    status: 'pending',
    validator: ContentValidators.validateContentAccuracy,
  },
  {
    id: 'content-freshness',
    category: 'content',
    title: 'Content Freshness',
    description: 'Ensure all content is up-to-date and relevant',
    required: true,
    automated: true,
    status: 'pending',
    validator: ContentValidators.validateContentFreshness,
  },
]